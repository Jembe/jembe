Public Dev Lunch:
    ☐ Move examples into separete project on github (LGPLv3??)
    ☐ Move jembe git on github and write good description into readme.rst (LGPLv3)
    ☐ Create new project that will support user/group management, login/logout, user profile/settings and password management
    Start new jembe-ui project jembeui, publish it on githubm under AGPLv3, that will contain:
      ☐ CLI commands for creating new jembe project from templates
      ☐ template for "default" project (session, postgres, sqlalchemy)
      ☐ reusable components (pages, menues, notifications, messages, tables, forms etc.)
  Dev:
    ☐ Add csfr protection
    ☐ Temp storage contains uploadet and regular temp files, user can access his temp files via url, (in order to alow saving uploaded files in temp storage  and working with them before moving them to permanent storage )
    ☐ disable all inputs and buttons while processing x-jembe request??? so that we donot get conflicts with data and lose data on update
    ☐ Rendering same component twice brakes the jembe
    ☐ Calling action from comoponet if other componet changed state must be confirmed (losse of data) - define flow end actions with custom confirmation message and inflow list of comonents and actions


Archive:
  ✔ Error handling and Restricted access @done(20-09-21 10:55) @project(Public Dev Lunch)
  ✔ inject params @done(20-09-22 09:53) @project(Public Dev Lunch)
  ✔ update window.location on x-jembe request @done(20-09-23 10:52) @project(Public Dev Lunch)
  ✔ update window.location on regular http request if necessary @done(20-09-23 10:52) @project(Public Dev Lunch)
  ✔ How to update page title or other header tags??? without introducing new logic @done(20-10-30 07:35) @project(Public Dev Lunch)
  ✔ Deffered actions?? @done(20-10-30 07:35) @project(Public Dev Lunch)
  ✔ design and create javascript rendering part and updateing window.location @done(20-12-01 11:29) @project(Public Dev Lunch)
  ✔ design and create javascript execution part @done(20-11-20 08:18) @project(Public Dev Lunch)
  ✔ Flash messages @done(20-12-01 11:29) @project(Public Dev Lunch)
  ✔ Create page counter @done(20-10-30 07:35) @project(Public Dev Lunch)
  ✔ Create page with coutner component @done(20-10-30 07:35) @project(Public Dev Lunch)
  ✔ Create page with multiple coutner components @done(20-10-30 07:35) @project(Public Dev Lunch)
  ✔ Create blog post demo @done(20-10-30 07:35) @project(Public Dev Lunch)
  ✔ create list/view/list demo @done(20-10-30 07:35) @project(Public Dev Lunch)
  ✔ Suport for init_params for basic types @done(20-10-30 07:35) @project(Public Dev Lunch)
  ✔ use .html templates instead of jinja2 in order to enable autoescaping @done(20-09-10 23:12) @project(Public Dev Lunch)
  ✔ Build site and code examples for waitlist @done(21-01-09 19:37) @project(Public Dev Lunch)
  ✔ SEO on waitlist site and promote @done(21-01-09 19:37) @project(Public Dev Lunch)
  ✘ send uploaded files toggether with x-jembe request @cancelled(21-01-22 08:15) @project(Files)
  ✔ add AddFileForUpload command to JembeClient(js) that will store: @done(21-02-08 21:40) @project(Files)
  ✔ component name, init param name, file name that is about to be uploaded and random generated file upload id @done(21-02-08 21:40) @project(Files)
  ✔ it will also set coresponding init param of the random generated file upload id ?? @done(21-02-08 21:40) @project(Files)
  ✔ it will replace any existing "file" on that component init_param if it already exists (delete if file is empty) @done(21-02-08 21:40) @project(Files)
  ✔ add AddFilesForUpload command that will add multiple files for one component init_param, it should replace files if already exist (remove files if list is empty) @done(21-02-08 21:40) @project(Files)
  ✔ if files list is not empty and x-jembe request is about to be submited, send x-jembe=fileupload request first with list of all files that need to be uploaded with their id, componet initparam @done(21-02-11 09:42) @project(Files)
  ✘ x-jembe=fileupload request should return *save files u default temp storage) and return dict(uploadid, [(storage_name, file_path)]) with fileupload_request_id (unique) @cancelled(21-03-04 00:47) @project(Files)
  ✔ JembeClient should replace all uplaoded files with (storage=storage_name, path=file_path) with date returned from x-jembe=fileupload request @done(21-02-11 09:43) @project(Files)
  ✔ JembeClient can now finaly send regular x-jembe request with fileupload id set to fileupload_request_id returned by previous request @done(21-02-11 09:43) @project(Files)
  ✔ Create tests for upload on server side @done(21-02-17 11:24) @project(Files)
  ✘ in temp storage create new dir with named by session id (if not exists) @cancelled(21-02-17 11:24) @project(Files)
  ✔ in that directory create new directory uniquly named (fileupload_request_id) @done(21-02-17 11:24) @project(Files)
  ✔ uplaod all files to this directory @done(21-02-17 11:24) @project(Files)
  ✔ for all uploaded files create coresponding File instances (storage=temp, path=sessid/fileuplaod_request_id/filename) @done(21-02-17 11:25) @project(Files)
  ✔ return json data (as specified before ) @done(21-02-17 11:25) @project(Files)
  ✘ for every file check if sessid/fileupload_request_id part of path is valid if not 403 @cancelled(21-03-04 00:47) @project(Files)
  ✔ process request regulary @done(21-02-17 11:53) @project(Files)
  ✔ when processing is finished delete sessiion_id/fileupload_request_id dir (in backgroud posibly) @done(21-02-17 11:53) @project(Files)
  ✔ if session_id dir is empty delete it to @done(21-02-17 11:53) @project(Files)
  ✘ multi-form request saves files in temporary storage @cancelled(21-02-03 21:46) @project(Files)
  ✘ and return mapping between component init params and temporary files @cancelled(21-02-03 21:46) @project(Files)
  ✘ add this mapping to x-jembe request @cancelled(21-02-03 21:46) @project(Files)
  ✘ send x-jembe request @cancelled(21-02-03 21:46) @project(Files)
  ✘ replace component init params with actual files in temporary storage @cancelled(21-02-03 21:47) @project(Files)
  ✘ process x-jembe request @cancelled(21-02-03 21:47) @project(Files)
  ✘ delete files from temporary storage received by multi-form request if thay still exist in temporary storage @cancelled(21-02-03 21:47) @project(Files)
  ✔ MorphDOM @done(21-03-04 00:47)
  ✔ AlpineJS (something similar) integration @done(21-03-04 00:47)
  ✔ Display simple page @started(20-08-18 10:32) @done(20-08-18 12:35) @lasted(2h3m27s) @project(Public Dev Lunch)
  ✔ Pytest @started(20-08-24 10:01) @done(20-08-24 10:54) @lasted(53m27s) @project(Public Dev Lunch.Make test for simple page)
  ✔ converge test @started(20-08-24 10:55) @done(20-08-24 11:25) @lasted(30m52s) @project(Public Dev Lunch.Make test for simple page)
  ✔ Live reload of coverage -m pytest @started(20-08-24 11:49) @done(20-08-24 13:19) @lasted(1h30m2s) @project(Public Dev Lunch.Make test for simple page)
    watchmedo shell-command -c 'coverage run -m pytest' jembe tests
  ✔ Add test for jmb attributes additon @done(20-08-24 13:21) @project(Public Dev Lunch)
  ✔ Adding tag should be done by Processor @done(20-08-24 13:21) @project(Public Dev Lunch.Add jmb tag with init_params for page)
  ✔ Jinja templates should not be aweare of tag beeing added @done(20-08-24 13:20) @project(Public Dev Lunch.Add jmb tag with init_params for page)
  ✔ Tag will be added via lxml, but should think about performance penalties @done(20-08-24 13:20) @project(Public Dev Lunch.Add jmb tag with init_params for page)
  ✘ Consier using jinja2 template engin to add tags if posible @cancelled(20-08-24 13:20) @project(Public Dev Lunch.Add jmb tag with init_params for page)
  ✔ If component has one sorounding tag attributes should be added inside that tag @done(20-08-24 13:20) @project(Public Dev Lunch.Add jmb tag with init_params for page)
  ✔ Othervise if there is not souronding tag response will be wraped in div with jembe dom attrs @done(20-08-24 13:20) @project(Public Dev Lunch.Add jmb tag with init_params for page)
  ✔ Display simple page with custom config @done(20-08-24 13:19) @project(Public Dev Lunch)
  ✔ Display page with url params @done(20-08-28 12:43) @project(Public Dev Lunch.Init params)
  ✔ url params types @done(20-08-28 12:43) @project(Public Dev Lunch.Init params)
  ✔ put state params in jmb:data (in html) @done(20-08-28 12:43) @project(Public Dev Lunch.Init params)
  ✔ serialization of state params @done(20-08-28 12:43) @project(Public Dev Lunch.Init params)
  ✔ performance params support @done(20-08-28 12:43) @project(Public Dev Lunch.Init params)
  ✔ state and url params in template context @done(20-08-28 12:43) @project(Public Dev Lunch.Init params)
  ✔ updateing state params @done(20-08-28 12:43) @project(Public Dev Lunch.Init params)
